# ssz_serialization
# Copyright (c) 2021-2023 Status Research & Development GmbH
# Licensed and distributed under either of
#   * MIT license (license terms in the root directory or at https://opensource.org/licenses/MIT).
#   * Apache v2 license (license terms in the root directory or at https://www.apache.org/licenses/LICENSE-2.0).
# at your option. This file may not be copied, modified, or distributed except according to those terms.

{.used.}

import
  std/[random, strutils, tables],
  results,
  unittest2,
  stew/endians2,
  serialization/case_objects,
  ../ssz_serialization/merkleization

from std/sequtils import mapIt

func d(x: openArray[byte]): Digest =
  result.data[0 ..< x.len] = x

func d(x: openArray[UintN]): Digest =
  for i, v in x:
    result.data[i * sizeof(v) ..< (i + 1) * sizeof(v)] = toBytesLE(v)

func d(x: UintN): Digest =
  d([x])

func d(a, b: Digest): Digest =
  digest(a.data, b.data)

type
  SingleFieldTestStruct = object
    a: byte
  SmallTestStruct = object
    a: uint16
    b: uint16
  VarTestStruct = object
    a: uint16
    b: List[uint16, 1024]
    c: uint8
  ProgressiveSingleFieldContainerTestStruct
      {.sszActiveFields: [1].} = object
    a: uint8
  ProgressiveSingleListContainerTestStruct
      {.sszActiveFields: [0, 0, 0, 0, 1].} = object
    c: BitSeq
  ProgressiveVarTestStruct
      {.sszActiveFields: [1, 0, 1, 0, 1].} = object
    a: uint8
    b: List[uint16, 123]
    c: BitSeq
  ProgressiveComplexTestStruct
      {.sszActiveFields: [
        1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1
      ].} = object
    a: uint8
    b: List[uint16, 123]
    c: BitSeq
    d: seq[uint64]
    e: seq[SmallTestStruct]
    f: seq[seq[VarTestStruct]]
    g: List[ProgressiveSingleFieldContainerTestStruct, 10]
    h: seq[ProgressiveVarTestStruct]
  SelectorA {.pure.} = enum
    a = 1
  CompatibleUnionA {.allowDiscriminatorsWithoutZero.} = object
    case selector: SelectorA
    of SelectorA.a: aData: ProgressiveSingleFieldContainerTestStruct
  SelectorBC {.pure.} = enum
    b = 2
    c = 3
  CompatibleUnionBC {.allowDiscriminatorsWithoutZero.} = object
    case selector: SelectorBC
    of SelectorBC.b: bData: ProgressiveSingleListContainerTestStruct
    of SelectorBC.c: cData: ProgressiveVarTestStruct
  SelectorABCA {.pure.} = enum
    a1 = 1
    b = 2
    c = 3
    a4 = 4
  CompatibleUnionABCA {.allowDiscriminatorsWithoutZero.} = object
    case selector: SelectorABCA
    of SelectorABCA.a1, SelectorABCA.a4:
      aData: ProgressiveSingleFieldContainerTestStruct
    of SelectorABCA.b: bData: ProgressiveSingleListContainerTestStruct
    of SelectorABCA.c: cData: ProgressiveVarTestStruct
  E = object
    x: bool
    y: bool
  X = object
    a: bool
    b: uint8
    c: uint16
    d: uint32
    e: uint64
    f: UInt128
    g: UInt256
    h: BitArray[40]
    i: BitArray[333]
    j: BitList[40]
    k: BitList[333]
    l: BitList[333]
    m: BitList[333]
    n: BitList[333]
    o: array[2, bool]
    p: array[6, uint64]
    q: array[2, E]
    r: List[E, 2]
    s: List[E, 2]
    t: List[E, 2]
    u: E
    v: tuple[a, b: bool]
    w: tuple[a, b: E, c: bool]
    x: HashArray[2, E]
    y: HashList[E, 2]
    z: HashList[E, 2]
    aa: HashArray[2, uint64]
    ab: HashList[uint64, 2]
    ac: HashList[uint64, 2]
    ad: HashArray[1, E]
    ae: HashList[E, 1]
    af: HashList[E, 1]
    ag: seq[uint16]
    ah: seq[uint16]
    ai: seq[uint16]
    aj: seq[uint16]
    ak: seq[uint16]
    al: seq[SingleFieldTestStruct]
    am: seq[SingleFieldTestStruct]
    an: seq[SingleFieldTestStruct]
    ao: seq[SingleFieldTestStruct]
    ap: BitSeq
    aq: BitSeq
    ar: BitSeq
    `as`: BitSeq
    at: BitSeq
    au: BitSeq
    av: BitArray[256]
    aw: BitList[256]
    ax: BitSeq
    ay: BitArray[257]
    az: BitList[257]
    ba: BitSeq
    bb: BitSeq
    bc: BitSeq
    bd: BitSeq
    be: ProgressiveSingleFieldContainerTestStruct
    bf: ProgressiveSingleListContainerTestStruct
    bg: ProgressiveVarTestStruct
    bh: ProgressiveVarTestStruct
    bi: ProgressiveVarTestStruct
    bj: ProgressiveComplexTestStruct
    bk: CompatibleUnionA
    bl: CompatibleUnionBC
    bm: CompatibleUnionABCA
let
  x = X(
    a: true,
    b: 0x08'u8,
    c: 0x1616'u16,
    d: 0x32323232'u32,
    e: 0x6464646464646464'u64,
    f: 0x01281281281281281281281281281280'u128,
    g: 0x02562562562562562562562562562562562562562560'u256,
    h: BitArray[40](bytes: [
      0b01010101'u8, 0b10101010'u8, 0b11111111'u8,
      0b10101010'u8, 0b01010101'u8]),
    i: BitArray[333](bytes: [
      0'u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
      32, 33, 34, 35, 36, 37, 38, 39, 40, 0b11111]),
    j: BitList[40](@[
      0b01010101'u8, 0b10101010'u8, 0b11111111'u8,
      0b10101010'u8, 0b01010101'u8, 0b1'u8]),
    k: BitList[333](@[
      0'u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
      32, 33, 34, 35, 36, 37, 38, 39, 40, 0b111111]),
    l: BitList[333](@[
      0'u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0xFF]),
    m: BitList[333](@[
      0'u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
      0x01]),
    n: BitList[333](@[0x01'u8]),
    o: [false, true],
    p: [1'u64, 2, 3, 4, 5, 6],
    q: [E(x: false, y: true), E(x: true, y: false)],
    r: List[E, 2](@[E(x: false, y: true), E(x: true, y: false)]),
    s: List[E, 2](@[]),
    t: List[E, 2](@[]),
    u: E(x: false, y: true),
    v: (a: false, b: true),
    w: (a: E(x: false, y: true), b: E(x: true, y: false), c: true),
    x: HashArray[2, E](data: [E(x: false, y: true), E(x: true, y: false)]),
    y: HashList[E, 2].init(
      @[E(x: false, y: true), E(x: true, y: false)]),
    z: HashList[E, 2].init(@[]),
    aa: HashArray[2, uint64](data: [1'u64, 2]),
    ab: HashList[uint64, 2].init(@[1'u64, 2]),
    ac: HashList[uint64, 2].init(@[]),
    ad: HashArray[1, E](data: [E(x: true, y: false)]),
    ae: HashList[E, 1].init(@[E(x: true, y: false)]),
    af: HashList[E, 1].init(@[]),
    ag: @[],
    ah: @[0x0100, 0x0101],
    ai: @[
      0x0100, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107,
      0x0108, 0x0109, 0x010a, 0x010b, 0x010c, 0x010d, 0x010e, 0x010f,
      0x0200],
    aj: @[
      0x0100, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107,
      0x0108, 0x0109, 0x010a, 0x010b, 0x010c, 0x010d, 0x010e, 0x010f,
      0x0200, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207,
      0x0208, 0x0209, 0x020a, 0x020b, 0x020c, 0x020d, 0x020e, 0x020f,
      0x0210, 0x0211, 0x0212, 0x0213, 0x0214, 0x0215, 0x0216, 0x0217,
      0x0218, 0x0219, 0x021a, 0x021b, 0x021c, 0x021d, 0x021e, 0x021f,
      0x0220, 0x0221, 0x0222, 0x0223, 0x0224, 0x0225, 0x0226, 0x0227,
      0x0228, 0x0229, 0x022a, 0x022b, 0x022c, 0x022d, 0x022e, 0x022f,
      0x0230, 0x0231, 0x0232, 0x0233, 0x0234, 0x0235, 0x0236, 0x0237,
      0x0238, 0x0239, 0x023a, 0x023b, 0x023c, 0x023d, 0x023e, 0x023f],
    ak: @[
      0x0100, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107,
      0x0108, 0x0109, 0x010a, 0x010b, 0x010c, 0x010d, 0x010e, 0x010f,
      0x0200, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207,
      0x0208, 0x0209, 0x020a, 0x020b, 0x020c, 0x020d, 0x020e, 0x020f,
      0x0210, 0x0211, 0x0212, 0x0213, 0x0214, 0x0215, 0x0216, 0x0217,
      0x0218, 0x0219, 0x021a, 0x021b, 0x021c, 0x021d, 0x021e, 0x021f,
      0x0220, 0x0221, 0x0222, 0x0223, 0x0224, 0x0225, 0x0226, 0x0227,
      0x0228, 0x0229, 0x022a, 0x022b, 0x022c, 0x022d, 0x022e, 0x022f,
      0x0230, 0x0231, 0x0232, 0x0233, 0x0234, 0x0235, 0x0236, 0x0237,
      0x0238, 0x0239, 0x023a, 0x023b, 0x023c, 0x023d, 0x023e, 0x023f,
      0x0300],
    al: @[],
    am: @[SingleFieldTestStruct(a: 1)],
    an: @[SingleFieldTestStruct(a: 1), SingleFieldTestStruct(a: 2)],
    ao: @[
      SingleFieldTestStruct(a: 1), SingleFieldTestStruct(a: 2),
      SingleFieldTestStruct(a: 3), SingleFieldTestStruct(a: 4),
      SingleFieldTestStruct(a: 5)],
    ap: BitSeq(@[0x01'u8]),
    aq: BitSeq(@[0x2b'u8, 0x01]),
    ar: BitSeq(@[0x1a'u8]),
    `as`: BitSeq(@[0x0a'u8]),
    at: BitSeq(@[0xc5'u8, 0x06]),
    au: BitSeq(@[0xc5'u8, 0xc2, 0x01]),
    av: BitArray[256](bytes: [
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]),
    aw: BitList[256](@[
      0xff'u8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x01]),
    ax: BitSeq(@[
      0xff'u8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x01]),
    ay: BitArray[257](bytes: [
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x01]),
    az: BitList[257](@[
      0xff'u8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x03]),
    ba: BitSeq(@[
      0xff'u8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x03]),
    bb: BitSeq(@[0x03'u8]),
    bc: BitSeq(@[
      0xff'u8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x01]),
    bd: BitSeq(@[
      0xff'u8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x03]),
    be: ProgressiveSingleFieldContainerTestStruct(a: 0xab),
    bf: ProgressiveSingleListContainerTestStruct(c: BitSeq(@[0x29'u8])),
    bg: ProgressiveVarTestStruct(a: 0xab),
    bh: ProgressiveVarTestStruct(
      a: 0xab, b: List[uint16, 123](@[]), c: BitSeq(@[0x01'u8])),
    bi: ProgressiveVarTestStruct(
      a: 0xab,
      b: List[uint16, 123](@[0x1122'u16, 0x3344]),
      c: BitSeq(@[0x29'u8])),
    bj: ProgressiveComplexTestStruct(
      a: 0xab,
      b: List[uint16, 123](@[0x1122'u16, 0x3344]),
      c: BitSeq(@[0x29'u8]),
      d: @[0x4242424242424242'u64, 0x3333333333333333'u64],
      e: @[
        SmallTestStruct(a: 0x4567, b: 0x0123),
        SmallTestStruct(a: 0x89ab, b: 0xcdef),
      ],
      f: @[
        @[
          VarTestStruct(
            a: 0x123, b: List[uint16, 1024](@[1'u16, 2, 3]), c: 0x12),
          VarTestStruct(
            a: 0x456, b: List[uint16, 1024](@[4'u16, 5, 6]), c: 0x45),
          VarTestStruct(
            a: 0x789, b: List[uint16, 1024](@[7'u16, 8, 9]), c: 0x78),
        ]
      ],
      g: List[ProgressiveSingleFieldContainerTestStruct, 10](@[
        ProgressiveSingleFieldContainerTestStruct(),
        ProgressiveSingleFieldContainerTestStruct(a: 0x00),
        ProgressiveSingleFieldContainerTestStruct(a: 0x42),
      ]),
      h: @[
        ProgressiveVarTestStruct(
          a: 0xab,
          b: List[uint16, 123](@[0x1122'u16, 0x3344]),
          c: BitSeq(@[0x29'u8])),
      ]),
    bk: CompatibleUnionA.init(
      selector = SelectorA.a,
      aData = ProgressiveSingleFieldContainerTestStruct(a: 0xab)),
    bl: CompatibleUnionBC.init(
      selector = SelectorBC.b,
      bData = ProgressiveSingleListContainerTestStruct(c: BitSeq(@[0x29'u8]))),
    bm: CompatibleUnionABCA.init(
      selector = SelectorABCA.a4,
      aData = ProgressiveSingleFieldContainerTestStruct(a: 0xab)))
  roots = block:
    var res = {
      # a
      0b10000000: d(1'u8),

      # b
      0b10000001: d(0x08'u8),

      # c
      0b10000010: d(0x1616'u16),

      # d
      0b10000011: d(0x32323232'u32),

      # e
      0b10000100: d(0x6464646464646464'u64),

      # f
      0b10000101: d(0x01281281281281281281281281281280'u128),

      # g
      0b10000110: d(0x02562562562562562562562562562562562562562560'u256),

      # h
      0b10000111: d(0b01010101_10101010_11111111_10101010_01010101'u64),

      # i
      0b100010000: d([0'u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]),
      0b100010001: d([32'u8, 33, 34, 35, 36, 37, 38, 39, 40, 0b11111]),

      # j
      0b100010010: d(0b01010101_10101010_11111111_10101010_01010101'u64),
      0b100010011: d(40'u64),

      # k
      0b1000101000: d([0'u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]),
      0b1000101001: d([32'u8, 33, 34, 35, 36, 37, 38, 39, 40, 0b11111]),
      0b100010101: d(333'u64),

      # l
      0b1000101100: d([0'u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0x7F]),
      0b1000101101: d(0'u256),
      0b100010111: d(255'u64),

      # m
      0b1000110000: d([0'u8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]),
      0b1000110001: d(0'u256),
      0b100011001: d(256'u64),

      # n
      0b1000110100: d(0'u256),
      0b1000110101: d(0'u256),
      0b100011011: d(0'u64),

      # o
      0b10001110: d([0'u8, 1]),

      # p
      0b100011110: d([1'u64, 2, 3, 4]),
      0b100011111: d([5'u64, 6]),

      # q
      0b1001000000: d(0'u8),
      0b1001000001: d(1'u8),
      0b1001000010: d(1'u8),
      0b1001000011: d(0'u8),

      # r
      0b10010001000: d(0'u8),
      0b10010001001: d(1'u8),
      0b10010001010: d(1'u8),
      0b10010001011: d(0'u8),
      0b100100011: d(2'u64),

      # s
      0b1001001000: d(0'u256),
      0b1001001001: d(0'u256),
      0b100100101: d(0'u64),

      # t
      0b1001001100: d(0'u256),
      0b1001001101: d(0'u256),
      0b100100111: d(0'u64),

      # u
      0b100101000: d(0'u8),
      0b100101001: d(1'u8),

      # v
      0b100101010: d(0'u8),
      0b100101011: d(1'u8),

      # w
      0b10010110000: d(0'u8),
      0b10010110001: d(1'u8),
      0b10010110010: d(1'u8),
      0b10010110011: d(0'u8),
      0b1001011010: d(1'u8),
      0b1001011011: d(0'u256),

      # x
      0b1001011100: d(0'u8),
      0b1001011101: d(1'u8),
      0b1001011110: d(1'u8),
      0b1001011111: d(0'u8),

      # y
      0b10011000000: d(0'u8),
      0b10011000001: d(1'u8),
      0b10011000010: d(1'u8),
      0b10011000011: d(0'u8),
      0b100110001: d(2'u64),

      # z
      0b1001100100: d(0'u256),
      0b1001100101: d(0'u256),
      0b100110011: d(0'u64),

      # aa
      0b10011010: d([1'u8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]),

      # ab
      0b100110110: d([1'u8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0]),
      0b100110111: d(2'u64),

      # ac
      0b100111000: d([]),
      0b100111001: d(0'u64),

      # ad
      0b100111010: d(1'u8),
      0b100111011: d(0'u8),

      # ae
      0b1001111000: d(1'u8),
      0b1001111001: d(0'u8),
      0b100111101: d(1'u64),

      # af
      0b100111110: d(0'u256),
      0b100111111: d(0'u64),

      # ag
      0b101000000: d([]),
      0b101000001: d(0'u64),

      # ah
      0b1010000100: d([]),
      0b1010000101: d([0x0100'u16, 0x0101]),
      0b101000011: d(2'u64),

      # ai
      0b10100010000: d([]),
      0b1010001000100: d([0x0200'u16]),
      0b1010001000101: d([]),
      0b1010001000110: d([]),
      0b1010001000111: d([]),
      0b1010001001: d([
        0x0100'u16, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107,
        0x0108, 0x0109, 0x010a, 0x010b, 0x010c, 0x010d, 0x010e, 0x010f]),
      0b101000101: d(0x11'u64),

      # aj
      0b10100011000: d([]),
      0b1010001100100: d([
        0x0200'u16, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207,
        0x0208, 0x0209, 0x020a, 0x020b, 0x020c, 0x020d, 0x020e, 0x020f]),
      0b1010001100101: d([
        0x0210'u16, 0x0211, 0x0212, 0x0213, 0x0214, 0x0215, 0x0216, 0x0217,
        0x0218, 0x0219, 0x021a, 0x021b, 0x021c, 0x021d, 0x021e, 0x021f]),
      0b1010001100110: d([
        0x0220'u16, 0x0221, 0x0222, 0x0223, 0x0224, 0x0225, 0x0226, 0x0227,
        0x0228, 0x0229, 0x022a, 0x022b, 0x022c, 0x022d, 0x022e, 0x022f]),
      0b1010001100111: d([
        0x0230'u16, 0x0231, 0x0232, 0x0233, 0x0234, 0x0235, 0x0236, 0x0237,
        0x0238, 0x0239, 0x023a, 0x023b, 0x023c, 0x023d, 0x023e, 0x023f]),
      0b1010001101: d([
        0x0100'u16, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107,
        0x0108, 0x0109, 0x010a, 0x010b, 0x010c, 0x010d, 0x010e, 0x010f]),
      0b101000111: d(0x50'u64),

      # ak
      0b101001000000: d([]),
      0b1010010000010000: d([0x0300'u16]),
      0b1010010000010001: d([]),
      0b1010010000010010: d([]),
      0b1010010000010011: d([]),
      0b1010010000010100: d([]),
      0b1010010000010101: d([]),
      0b1010010000010110: d([]),
      0b1010010000010111: d([]),
      0b1010010000011000: d([]),
      0b1010010000011001: d([]),
      0b1010010000011010: d([]),
      0b1010010000011011: d([]),
      0b1010010000011100: d([]),
      0b1010010000011101: d([]),
      0b1010010000011110: d([]),
      0b1010010000011111: d([]),
      0b1010010000100: d([
        0x0200'u16, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207,
        0x0208, 0x0209, 0x020a, 0x020b, 0x020c, 0x020d, 0x020e, 0x020f]),
      0b1010010000101: d([
        0x0210'u16, 0x0211, 0x0212, 0x0213, 0x0214, 0x0215, 0x0216, 0x0217,
        0x0218, 0x0219, 0x021a, 0x021b, 0x021c, 0x021d, 0x021e, 0x021f]),
      0b1010010000110: d([
        0x0220'u16, 0x0221, 0x0222, 0x0223, 0x0224, 0x0225, 0x0226, 0x0227,
        0x0228, 0x0229, 0x022a, 0x022b, 0x022c, 0x022d, 0x022e, 0x022f]),
      0b1010010000111: d([
        0x0230'u16, 0x0231, 0x0232, 0x0233, 0x0234, 0x0235, 0x0236, 0x0237,
        0x0238, 0x0239, 0x023a, 0x023b, 0x023c, 0x023d, 0x023e, 0x023f]),
      0b1010010001: d([
        0x0100'u16, 0x0101, 0x0102, 0x0103, 0x0104, 0x0105, 0x0106, 0x0107,
        0x0108, 0x0109, 0x010a, 0x010b, 0x010c, 0x010d, 0x010e, 0x010f]),
      0b101001001: d(0x51'u64),

      # al
      0b101001010: d([]),
      0b101001011: d(0'u64),

      # am
      0b1010011000: d([]),
      0b1010011001: d(1'u8),
      0b101001101: d(1'u64),

      # an
      0b10100111000: d([]),
      0b1010011100100: d(2'u8),
      0b1010011100101: d([]),
      0b1010011100110: d([]),
      0b1010011100111: d([]),
      0b1010011101: d(1'u8),
      0b101001111: d(2'u64),

      # ao
      0b10101000000: d([]),
      0b1010100000100: d(2'u8),
      0b1010100000101: d(3'u8),
      0b1010100000110: d(4'u8),
      0b1010100000111: d(5'u8),
      0b1010100001: d(1'u8),
      0b101010001: d(5'u64),

      # ap
      0b101010010: d([]),
      0b101010011: d(0'u64),

      # aq
      0b1010101000: d([]),
      0b1010101001: d(0x2b'u256),
      0b101010101: d(8'u64),

      # ar
      0b1010101100: d([]),
      0b1010101101: d(0x0a'u256),
      0b101010111: d(4'u64),

      # as
      0b1010110000: d([]),
      0b1010110001: d(0x02'u256),
      0b101011001: d(3'u64),

      # at
      0b1010110100: d([]),
      0b1010110101: d(0x02c5'u256),
      0b101011011: d(0x0a'u64),

      # au
      0b1010111000: d([]),
      0b1010111001: d(0xc2c5'u256),
      0b101011101: d(0x10'u64),

      # av
      0b10101111: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),

      # aw
      0b101100000: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b101100001: d(0x0100'u64),

      # ax
      0b1011000100: d([]),
      0b1011000101: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b101100011: d(0x0100'u64),

      # ay
      0b101100100: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b101100101: d(0x01'u64),

      # az
      0b1011001100: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b1011001101: d(0x01'u256),
      0b101100111: d(0x0101'u64),

      # ba
      0b10110100000: d([]),
      0b1011010000100: d(0x01'u256),
      0b1011010000101: d([]),
      0b1011010000110: d([]),
      0b1011010000111: d([]),
      0b1011010001: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b101101001: d(0x0101'u64),

      # bb
      0b1011010100: d([]),
      0b1011010101: d(0x01'u256),
      0b101101011: d(0x01'u64),

      # bc
      0b10110110000: d([]),
      0b1011011000100: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b1011011000101: d([]),
      0b1011011000110: d([]),
      0b1011011000111: d([]),
      0b1011011001: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b101101101: d(0x0200'u64),

      # bd
      0b10110111000: d([]),
      0b1011011100100: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b1011011100101: d(0x01'u256),
      0b1011011100110: d([]),
      0b1011011100111: d([]),
      0b1011011101: d(
        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'u256
      ),
      0b101101111: d(0x0201'u64),

      # be
      0b1011100000: d([]),
      0b1011100001: d(0xab'u8),
      0b101110001: d(0x01'u256),

      # bf
      0b10111001000: d([]),
      0b1011100100100: d([]),
      0b1011100100101: d([]),
      0b1011100100110: d([]),
      0b101110010011100: d([]),
      0b101110010011101: d(0x09'u256),
      0b10111001001111: d(0x05'u64),
      0b1011100101: d([]),
      0b101110011: d(0x10'u256),

      # bg
      0b10111010000: d([]),
      0b1011101000100: d([]),
      0b10111010001010000: d([]),
      0b10111010001010001: d([]),
      0b10111010001010010: d([]),
      0b10111010001010011: d([]),
      0b10111010001010100: d([]),
      0b10111010001010101: d([]),
      0b10111010001010110: d([]),
      0b10111010001010111: d([]),
      0b10111010001011: d(0x00'u64),
      0b1011101000110: d([]),
      0b10111010001110: d([]),
      0b10111010001111: d(0x00'u64),
      0b1011101001: d(0xab'u8),
      0b101110101: d(0x15'u256),

      # bh
      0b10111011000: d([]),
      0b1011101100100: d([]),
      0b10111011001010000: d([]),
      0b10111011001010001: d([]),
      0b10111011001010010: d([]),
      0b10111011001010011: d([]),
      0b10111011001010100: d([]),
      0b10111011001010101: d([]),
      0b10111011001010110: d([]),
      0b10111011001010111: d([]),
      0b10111011001011: d(0x00'u64),
      0b1011101100110: d([]),
      0b10111011001110: d([]),
      0b10111011001111: d(0x00'u64),
      0b1011101101: d(0xab'u8),
      0b101110111: d(0x15'u256),

      # bi
      0b10111100000: d([]),
      0b1011110000100: d([]),
      0b10111100001010000: d([0x1122'u16, 0x3344]),
      0b10111100001010001: d([]),
      0b10111100001010010: d([]),
      0b10111100001010011: d([]),
      0b10111100001010100: d([]),
      0b10111100001010101: d([]),
      0b10111100001010110: d([]),
      0b10111100001010111: d([]),
      0b10111100001011: d(0x02'u64),
      0b1011110000110: d([]),
      0b101111000011100: d([]),
      0b101111000011101: d(0x09'u256),
      0b10111100001111: d(0x05'u64),
      0b1011110001: d(0xab'u8),
      0b101111001: d(0x15'u256),

      # bj
      0b1011110100000: d([]),
      0b101111010000100000000: d([]),
      0b101111010000100000001000: d([]),
      0b10111101000010000000100100: d([]),
      0b101111010000100000001001010000: d([0x1122'u16, 0x3344]),
      0b101111010000100000001001010001: d([]),
      0b101111010000100000001001010010: d([]),
      0b101111010000100000001001010011: d([]),
      0b101111010000100000001001010100: d([]),
      0b101111010000100000001001010101: d([]),
      0b101111010000100000001001010110: d([]),
      0b101111010000100000001001010111: d([]),
      0b101111010000100000001001011: d(0x02'u64),
      0b10111101000010000000100110: d([]),
      0b1011110100001000000010011100: d([]),
      0b1011110100001000000010011101: d(0x09'u256),
      0b101111010000100000001001111: d(0x05'u64),
      0b10111101000010000000101: d(0xab'u8),
      0b1011110100001000000011: d(0x15'u256),
      0b10111101000010000001: d(0x01'u64),
      0b1011110100001000001: d([]),
      0b1011110100001000010: d([]),
      0b1011110100001000011: d([]),
      0b1011110100001000100: d([]),
      0b1011110100001000101: d([]),
      0b1011110100001000110: d([]),
      0b1011110100001000111: d([]),
      0b1011110100001001000: d([]),
      0b1011110100001001001: d([]),
      0b1011110100001001010: d([]),
      0b1011110100001001011: d([]),
      0b1011110100001001100: d([]),
      0b1011110100001001101: d([]),
      0b1011110100001001110: d([]),
      0b1011110100001001111: d([]),
      0b1011110100001010000: d([]),
      0b1011110100001010001: d([]),
      0b1011110100001010010: d([]),
      0b1011110100001010011: d([]),
      0b1011110100001010100: d([]),
      0b1011110100001010101: d([]),
      0b1011110100001010110: d([]),
      0b1011110100001010111: d([]),
      0b1011110100001011000: d([]),
      0b1011110100001011001: d([]),
      0b1011110100001011010: d([]),
      0b1011110100001011011: d([]),
      0b1011110100001011100: d([]),
      0b1011110100001011101: d([]),
      0b1011110100001011110: d([]),
      0b1011110100001011111: d([]),
      0b1011110100001100000: d([]),
      0b1011110100001100001: d([]),
      0b1011110100001100010: d([]),
      0b1011110100001100011: d([]),
      0b1011110100001100100: d([]),
      0b1011110100001100101: d([]),
      0b1011110100001100110: d([]),
      0b1011110100001100111: d([]),
      0b1011110100001101000: d([]),
      0b1011110100001101001: d([]),
      0b1011110100001101010: d([]),
      0b1011110100001101011: d([]),
      0b1011110100001101100: d([]),
      0b1011110100001101101: d([]),
      0b1011110100001101110: d([]),
      0b1011110100001101111: d([]),
      0b1011110100001110000: d([]),
      0b1011110100001110001: d([]),
      0b1011110100001110010: d([]),
      0b1011110100001110011: d([]),
      0b1011110100001110100: d([]),
      0b1011110100001110101: d([]),
      0b1011110100001110110: d([]),
      0b1011110100001110111: d([]),
      0b1011110100001111000: d([]),
      0b1011110100001111001: d([]),
      0b1011110100001111010: d([]),
      0b1011110100001111011: d([]),
      0b1011110100001111100: d([]),
      0b1011110100001111101: d([]),
      0b1011110100001111110: d([]),
      0b1011110100001111111: d([]),
      0b1011110100010000: d([]),
      0b1011110100010001: d([]),
      0b1011110100010010: d([]),
      0b101111010001001100: d([]),
      0b101111010001001101: d([0x4242424242424242'u64, 0x3333333333333333'u64]),
      0b10111101000100111: d(0x02'u64),
      0b1011110100010100: d([]),
      0b1011110100010101: d([]),
      0b1011110100010110: d([]),
      0b1011110100010111000: d([]),
      0b1011110100010111001000: d(0x89ab'u16),
      0b1011110100010111001001: d(0xcdef'u16),
      0b101111010001011100101: d([]),
      0b101111010001011100110: d([]),
      0b101111010001011100111: d([]),
      0b1011110100010111010: d(0x4567'u16),
      0b1011110100010111011: d(0x0123'u16),
      0b10111101000101111: d(0x02'u64),
      0b101111010001100000: d([]),
      0b101111010001100001000: d([]),
      0b1011110100011000010010000: d(0x0456'u16),
      0b10111101000110000100100010000000: d([0x0004'u16, 0x0005, 0x0006]),
      0b10111101000110000100100010000001: d([]),
      0b10111101000110000100100010000010: d([]),
      0b10111101000110000100100010000011: d([]),
      0b10111101000110000100100010000100: d([]),
      0b10111101000110000100100010000101: d([]),
      0b10111101000110000100100010000110: d([]),
      0b10111101000110000100100010000111: d([]),
      0b10111101000110000100100010001000: d([]),
      0b10111101000110000100100010001001: d([]),
      0b10111101000110000100100010001010: d([]),
      0b10111101000110000100100010001011: d([]),
      0b10111101000110000100100010001100: d([]),
      0b10111101000110000100100010001101: d([]),
      0b10111101000110000100100010001110: d([]),
      0b10111101000110000100100010001111: d([]),
      0b10111101000110000100100010010000: d([]),
      0b10111101000110000100100010010001: d([]),
      0b10111101000110000100100010010010: d([]),
      0b10111101000110000100100010010011: d([]),
      0b10111101000110000100100010010100: d([]),
      0b10111101000110000100100010010101: d([]),
      0b10111101000110000100100010010110: d([]),
      0b10111101000110000100100010010111: d([]),
      0b10111101000110000100100010011000: d([]),
      0b10111101000110000100100010011001: d([]),
      0b10111101000110000100100010011010: d([]),
      0b10111101000110000100100010011011: d([]),
      0b10111101000110000100100010011100: d([]),
      0b10111101000110000100100010011101: d([]),
      0b10111101000110000100100010011110: d([]),
      0b10111101000110000100100010011111: d([]),
      0b10111101000110000100100010100000: d([]),
      0b10111101000110000100100010100001: d([]),
      0b10111101000110000100100010100010: d([]),
      0b10111101000110000100100010100011: d([]),
      0b10111101000110000100100010100100: d([]),
      0b10111101000110000100100010100101: d([]),
      0b10111101000110000100100010100110: d([]),
      0b10111101000110000100100010100111: d([]),
      0b10111101000110000100100010101000: d([]),
      0b10111101000110000100100010101001: d([]),
      0b10111101000110000100100010101010: d([]),
      0b10111101000110000100100010101011: d([]),
      0b10111101000110000100100010101100: d([]),
      0b10111101000110000100100010101101: d([]),
      0b10111101000110000100100010101110: d([]),
      0b10111101000110000100100010101111: d([]),
      0b10111101000110000100100010110000: d([]),
      0b10111101000110000100100010110001: d([]),
      0b10111101000110000100100010110010: d([]),
      0b10111101000110000100100010110011: d([]),
      0b10111101000110000100100010110100: d([]),
      0b10111101000110000100100010110101: d([]),
      0b10111101000110000100100010110110: d([]),
      0b10111101000110000100100010110111: d([]),
      0b10111101000110000100100010111000: d([]),
      0b10111101000110000100100010111001: d([]),
      0b10111101000110000100100010111010: d([]),
      0b10111101000110000100100010111011: d([]),
      0b10111101000110000100100010111100: d([]),
      0b10111101000110000100100010111101: d([]),
      0b10111101000110000100100010111110: d([]),
      0b10111101000110000100100010111111: d([]),
      0b10111101000110000100100011: d(0x03'u64),
      0b1011110100011000010010010: d(0x45'u8),
      0b1011110100011000010010011: d([]),
      0b1011110100011000010010100: d(0x0789'u16),
      0b10111101000110000100101010000000: d([0x0007'u16, 0x0008, 0x0009]),
      0b10111101000110000100101010000001: d([]),
      0b10111101000110000100101010000010: d([]),
      0b10111101000110000100101010000011: d([]),
      0b10111101000110000100101010000100: d([]),
      0b10111101000110000100101010000101: d([]),
      0b10111101000110000100101010000110: d([]),
      0b10111101000110000100101010000111: d([]),
      0b10111101000110000100101010001000: d([]),
      0b10111101000110000100101010001001: d([]),
      0b10111101000110000100101010001010: d([]),
      0b10111101000110000100101010001011: d([]),
      0b10111101000110000100101010001100: d([]),
      0b10111101000110000100101010001101: d([]),
      0b10111101000110000100101010001110: d([]),
      0b10111101000110000100101010001111: d([]),
      0b10111101000110000100101010010000: d([]),
      0b10111101000110000100101010010001: d([]),
      0b10111101000110000100101010010010: d([]),
      0b10111101000110000100101010010011: d([]),
      0b10111101000110000100101010010100: d([]),
      0b10111101000110000100101010010101: d([]),
      0b10111101000110000100101010010110: d([]),
      0b10111101000110000100101010010111: d([]),
      0b10111101000110000100101010011000: d([]),
      0b10111101000110000100101010011001: d([]),
      0b10111101000110000100101010011010: d([]),
      0b10111101000110000100101010011011: d([]),
      0b10111101000110000100101010011100: d([]),
      0b10111101000110000100101010011101: d([]),
      0b10111101000110000100101010011110: d([]),
      0b10111101000110000100101010011111: d([]),
      0b10111101000110000100101010100000: d([]),
      0b10111101000110000100101010100001: d([]),
      0b10111101000110000100101010100010: d([]),
      0b10111101000110000100101010100011: d([]),
      0b10111101000110000100101010100100: d([]),
      0b10111101000110000100101010100101: d([]),
      0b10111101000110000100101010100110: d([]),
      0b10111101000110000100101010100111: d([]),
      0b10111101000110000100101010101000: d([]),
      0b10111101000110000100101010101001: d([]),
      0b10111101000110000100101010101010: d([]),
      0b10111101000110000100101010101011: d([]),
      0b10111101000110000100101010101100: d([]),
      0b10111101000110000100101010101101: d([]),
      0b10111101000110000100101010101110: d([]),
      0b10111101000110000100101010101111: d([]),
      0b10111101000110000100101010110000: d([]),
      0b10111101000110000100101010110001: d([]),
      0b10111101000110000100101010110010: d([]),
      0b10111101000110000100101010110011: d([]),
      0b10111101000110000100101010110100: d([]),
      0b10111101000110000100101010110101: d([]),
      0b10111101000110000100101010110110: d([]),
      0b10111101000110000100101010110111: d([]),
      0b10111101000110000100101010111000: d([]),
      0b10111101000110000100101010111001: d([]),
      0b10111101000110000100101010111010: d([]),
      0b10111101000110000100101010111011: d([]),
      0b10111101000110000100101010111100: d([]),
      0b10111101000110000100101010111101: d([]),
      0b10111101000110000100101010111110: d([]),
      0b10111101000110000100101010111111: d([]),
      0b10111101000110000100101011: d(0x03'u64),
      0b1011110100011000010010110: d(0x78'u8),
      0b1011110100011000010010111: d([]),
      0b10111101000110000100110: d([]),
      0b10111101000110000100111: d([]),
      0b1011110100011000010100: d(0x0123'u16),
      0b10111101000110000101010000000: d([0x0001'u16, 0x0002, 0x0003]),
      0b10111101000110000101010000001: d([]),
      0b10111101000110000101010000010: d([]),
      0b10111101000110000101010000011: d([]),
      0b10111101000110000101010000100: d([]),
      0b10111101000110000101010000101: d([]),
      0b10111101000110000101010000110: d([]),
      0b10111101000110000101010000111: d([]),
      0b10111101000110000101010001000: d([]),
      0b10111101000110000101010001001: d([]),
      0b10111101000110000101010001010: d([]),
      0b10111101000110000101010001011: d([]),
      0b10111101000110000101010001100: d([]),
      0b10111101000110000101010001101: d([]),
      0b10111101000110000101010001110: d([]),
      0b10111101000110000101010001111: d([]),
      0b10111101000110000101010010000: d([]),
      0b10111101000110000101010010001: d([]),
      0b10111101000110000101010010010: d([]),
      0b10111101000110000101010010011: d([]),
      0b10111101000110000101010010100: d([]),
      0b10111101000110000101010010101: d([]),
      0b10111101000110000101010010110: d([]),
      0b10111101000110000101010010111: d([]),
      0b10111101000110000101010011000: d([]),
      0b10111101000110000101010011001: d([]),
      0b10111101000110000101010011010: d([]),
      0b10111101000110000101010011011: d([]),
      0b10111101000110000101010011100: d([]),
      0b10111101000110000101010011101: d([]),
      0b10111101000110000101010011110: d([]),
      0b10111101000110000101010011111: d([]),
      0b10111101000110000101010100000: d([]),
      0b10111101000110000101010100001: d([]),
      0b10111101000110000101010100010: d([]),
      0b10111101000110000101010100011: d([]),
      0b10111101000110000101010100100: d([]),
      0b10111101000110000101010100101: d([]),
      0b10111101000110000101010100110: d([]),
      0b10111101000110000101010100111: d([]),
      0b10111101000110000101010101000: d([]),
      0b10111101000110000101010101001: d([]),
      0b10111101000110000101010101010: d([]),
      0b10111101000110000101010101011: d([]),
      0b10111101000110000101010101100: d([]),
      0b10111101000110000101010101101: d([]),
      0b10111101000110000101010101110: d([]),
      0b10111101000110000101010101111: d([]),
      0b10111101000110000101010110000: d([]),
      0b10111101000110000101010110001: d([]),
      0b10111101000110000101010110010: d([]),
      0b10111101000110000101010110011: d([]),
      0b10111101000110000101010110100: d([]),
      0b10111101000110000101010110101: d([]),
      0b10111101000110000101010110110: d([]),
      0b10111101000110000101010110111: d([]),
      0b10111101000110000101010111000: d([]),
      0b10111101000110000101010111001: d([]),
      0b10111101000110000101010111010: d([]),
      0b10111101000110000101010111011: d([]),
      0b10111101000110000101010111100: d([]),
      0b10111101000110000101010111101: d([]),
      0b10111101000110000101010111110: d([]),
      0b10111101000110000101010111111: d([]),
      0b10111101000110000101011: d(0x03'u64),
      0b1011110100011000010110: d(0x12'u8),
      0b1011110100011000010111: d([]),
      0b1011110100011000011: d(0x03'u64),
      0b10111101000110001: d(0x01'u64),
      0b1011110100011001: d([]),
      0b1011110100011010: d([]),
      0b1011110100011011: d([]),
      0b1011110100011100: d([]),
      0b1011110100011101: d([]),
      0b1011110100011110: d([]),
      0b10111101000111110000000: d([]),
      0b10111101000111110000001: d(0x00'u8),
      0b1011110100011111000001: d(0x01'u256),
      0b10111101000111110000100: d([]),
      0b10111101000111110000101: d(0x00'u8),
      0b1011110100011111000011: d(0x01'u256),
      0b10111101000111110001000: d([]),
      0b10111101000111110001001: d(0x42'u8),
      0b1011110100011111000101: d(0x01'u256),
      0b101111010001111100011: d([]),
      0b101111010001111100100: d([]),
      0b101111010001111100101: d([]),
      0b101111010001111100110: d([]),
      0b101111010001111100111: d([]),
      0b101111010001111101000: d([]),
      0b101111010001111101001: d([]),
      0b101111010001111101010: d([]),
      0b101111010001111101011: d([]),
      0b101111010001111101100: d([]),
      0b101111010001111101101: d([]),
      0b101111010001111101110: d([]),
      0b101111010001111101111: d([]),
      0b10111101000111111: d(0x03'u64),
      0b1011110100100: d([]),
      0b10111101001010000: d([0x1122'u16, 0x3344]),
      0b10111101001010001: d([]),
      0b10111101001010010: d([]),
      0b10111101001010011: d([]),
      0b10111101001010100: d([]),
      0b10111101001010101: d([]),
      0b10111101001010110: d([]),
      0b10111101001010111: d([]),
      0b10111101001011: d(0x02'u64),
      0b1011110100110: d([]),
      0b101111010011100: d([]),
      0b101111010011101: d(0x09'u256),
      0b10111101001111: d(0x05'u64),
      0b1011110101: d(0xab'u8),
      0b101111011: d(0x303115'u256),

      # bk
      0b10111110000: d([]),
      0b10111110001: d(0xab'u8),
      0b1011111001: d(0x01'u256),
      0b101111101: d(0x01'u8),

      # bl
      0b101111110000: d([]),
      0b10111111000100: d([]),
      0b10111111000101: d([]),
      0b10111111000110: d([]),
      0b1011111100011100: d([]),
      0b1011111100011101: d(0x09'u256),
      0b101111110001111: d(0x05'u64),
      0b10111111001: d([]),
      0b1011111101: d(0x10'u256),
      0b101111111: d(0x02'u8),

      # bm
      0b11000000000: d([]),
      0b11000000001: d(0xab'u8),
      0b1100000001: d(0x01'u256),
      0b110000001: d(0x04'u8),
    }.toOrderedTable
    for i in [
        0b10001000,
        0b10001001,
        0b100010100,
        0b10001010,
        0b100010110,
        0b10001011,
        0b100011000,
        0b10001100,
        0b100011010,
        0b10001101,
        0b10001111,
        0b100100000,
        0b100100001,
        0b10010000,
        0b1001000100,
        0b1001000101,
        0b100100010,
        0b10010001,
        0b100100100,
        0b10010010,
        0b100100110,
        0b10010011,
        0b10010100,
        0b10010101,
        0b1001011000,
        0b1001011001,
        0b100101100,
        0b100101101,
        0b10010110,
        0b100101110,
        0b100101111,
        0b10010111,
        0b1001100000,
        0b1001100001,
        0b100110000,
        0b10011000,
        0b100110010,
        0b10011001,
        0b10011011,
        0b10011100,
        0b10011101,
        0b100111100,
        0b10011110,
        0b10011111,
        0b10100000,
        0b101000010,
        0b10100001,
        0b101000100010,
        0b101000100011,
        0b10100010001,
        0b1010001000,
        0b101000100,
        0b10100010,
        0b101000110010,
        0b101000110011,
        0b10100011001,
        0b1010001100,
        0b101000110,
        0b10100011,
        0b101001000001000,
        0b101001000001001,
        0b101001000001010,
        0b101001000001011,
        0b101001000001100,
        0b101001000001101,
        0b101001000001110,
        0b101001000001111,
        0b10100100000100,
        0b10100100000101,
        0b10100100000110,
        0b10100100000111,
        0b1010010000010,
        0b1010010000011,
        0b101001000001,
        0b10100100000,
        0b101001000010,
        0b101001000011,
        0b10100100001,
        0b1010010000,
        0b101001000,
        0b10100100,
        0b10100101,
        0b101001100,
        0b10100110,
        0b101001110010,
        0b101001110011,
        0b10100111001,
        0b1010011100,
        0b101001110,
        0b10100111,
        0b101010000010,
        0b101010000011,
        0b10101000001,
        0b1010100000,
        0b101010000,
        0b10101000,
        0b10101001,
        0b101010100,
        0b10101010,
        0b101010110,
        0b10101011,
        0b101011000,
        0b10101100,
        0b101011010,
        0b10101101,
        0b101011100,
        0b10101110,
        0b10110000,
        0b101100010,
        0b10110001,
        0b10110010,
        0b101100110,
        0b10110011,
        0b101101000010,
        0b101101000011,
        0b10110100001,
        0b1011010000,
        0b101101000,
        0b10110100,
        0b101101010,
        0b10110101,
        0b101101100010,
        0b101101100011,
        0b10110110001,
        0b1011011000,
        0b101101100,
        0b10110110,
        0b101101110010,
        0b101101110011,
        0b10110111001,
        0b1011011100,
        0b101101110,
        0b10110111,
        0b101110000,
        0b10111000,
        0b10111001001110,
        0b1011100100111,
        0b101110010010,
        0b101110010011,
        0b10111001001,
        0b1011100100,
        0b101110010,
        0b10111001,
        0b1011101000101000,
        0b1011101000101001,
        0b1011101000101010,
        0b1011101000101011,
        0b101110100010100,
        0b101110100010101,
        0b10111010001010,
        0b1011101000101,
        0b1011101000111,
        0b101110100010,
        0b101110100011,
        0b10111010001,
        0b1011101000,
        0b101110100,
        0b10111010,
        0b1011101100101000,
        0b1011101100101001,
        0b1011101100101010,
        0b1011101100101011,
        0b101110110010100,
        0b101110110010101,
        0b10111011001010,
        0b1011101100101,
        0b1011101100111,
        0b101110110010,
        0b101110110011,
        0b10111011001,
        0b1011101100,
        0b101110110,
        0b10111011,
        0b1011110000101000,
        0b1011110000101001,
        0b1011110000101010,
        0b1011110000101011,
        0b101111000010100,
        0b101111000010101,
        0b10111100001010,
        0b1011110000101,
        0b10111100001110,
        0b1011110000111,
        0b101111000010,
        0b101111000011,
        0b10111100001,
        0b1011110000,
        0b101111000,
        0b10111100,
        0b10111101000010000000100101000,
        0b10111101000010000000100101001,
        0b10111101000010000000100101010,
        0b10111101000010000000100101011,
        0b1011110100001000000010010100,
        0b1011110100001000000010010101,
        0b101111010000100000001001010,
        0b10111101000010000000100101,
        0b101111010000100000001001110,
        0b10111101000010000000100111,
        0b1011110100001000000010010,
        0b1011110100001000000010011,
        0b101111010000100000001001,
        0b10111101000010000000100,
        0b1011110100001000000010,
        0b101111010000100000001,
        0b10111101000010000000,
        0b1011110100001000000,
        0b101111010000100000,
        0b101111010000100001,
        0b101111010000100010,
        0b101111010000100011,
        0b101111010000100100,
        0b101111010000100101,
        0b101111010000100110,
        0b101111010000100111,
        0b101111010000101000,
        0b101111010000101001,
        0b101111010000101010,
        0b101111010000101011,
        0b101111010000101100,
        0b101111010000101101,
        0b101111010000101110,
        0b101111010000101111,
        0b101111010000110000,
        0b101111010000110001,
        0b101111010000110010,
        0b101111010000110011,
        0b101111010000110100,
        0b101111010000110101,
        0b101111010000110110,
        0b101111010000110111,
        0b101111010000111000,
        0b101111010000111001,
        0b101111010000111010,
        0b101111010000111011,
        0b101111010000111100,
        0b101111010000111101,
        0b101111010000111110,
        0b101111010000111111,
        0b10111101000010000,
        0b10111101000010001,
        0b10111101000010010,
        0b10111101000010011,
        0b10111101000010100,
        0b10111101000010101,
        0b10111101000010110,
        0b10111101000010111,
        0b10111101000011000,
        0b10111101000011001,
        0b10111101000011010,
        0b10111101000011011,
        0b10111101000011100,
        0b10111101000011101,
        0b10111101000011110,
        0b10111101000011111,
        0b1011110100001000,
        0b1011110100001001,
        0b1011110100001010,
        0b1011110100001011,
        0b1011110100001100,
        0b1011110100001101,
        0b1011110100001110,
        0b1011110100001111,
        0b101111010000100,
        0b101111010000101,
        0b101111010000110,
        0b101111010000111,
        0b10111101000010,
        0b10111101000011,
        0b1011110100001,
        0b101111010000,
        0b10111101000100110,
        0b1011110100010011,
        0b101111010001011100100,
        0b10111101000101110010,
        0b10111101000101110011,
        0b1011110100010111001,
        0b101111010001011100,
        0b101111010001011101,
        0b10111101000101110,
        0b1011110100010111,
        0b1011110100011000010010001000000,
        0b1011110100011000010010001000001,
        0b1011110100011000010010001000010,
        0b1011110100011000010010001000011,
        0b1011110100011000010010001000100,
        0b1011110100011000010010001000101,
        0b1011110100011000010010001000110,
        0b1011110100011000010010001000111,
        0b1011110100011000010010001001000,
        0b1011110100011000010010001001001,
        0b1011110100011000010010001001010,
        0b1011110100011000010010001001011,
        0b1011110100011000010010001001100,
        0b1011110100011000010010001001101,
        0b1011110100011000010010001001110,
        0b1011110100011000010010001001111,
        0b1011110100011000010010001010000,
        0b1011110100011000010010001010001,
        0b1011110100011000010010001010010,
        0b1011110100011000010010001010011,
        0b1011110100011000010010001010100,
        0b1011110100011000010010001010101,
        0b1011110100011000010010001010110,
        0b1011110100011000010010001010111,
        0b1011110100011000010010001011000,
        0b1011110100011000010010001011001,
        0b1011110100011000010010001011010,
        0b1011110100011000010010001011011,
        0b1011110100011000010010001011100,
        0b1011110100011000010010001011101,
        0b1011110100011000010010001011110,
        0b1011110100011000010010001011111,
        0b101111010001100001001000100000,
        0b101111010001100001001000100001,
        0b101111010001100001001000100010,
        0b101111010001100001001000100011,
        0b101111010001100001001000100100,
        0b101111010001100001001000100101,
        0b101111010001100001001000100110,
        0b101111010001100001001000100111,
        0b101111010001100001001000101000,
        0b101111010001100001001000101001,
        0b101111010001100001001000101010,
        0b101111010001100001001000101011,
        0b101111010001100001001000101100,
        0b101111010001100001001000101101,
        0b101111010001100001001000101110,
        0b101111010001100001001000101111,
        0b10111101000110000100100010000,
        0b10111101000110000100100010001,
        0b10111101000110000100100010010,
        0b10111101000110000100100010011,
        0b10111101000110000100100010100,
        0b10111101000110000100100010101,
        0b10111101000110000100100010110,
        0b10111101000110000100100010111,
        0b1011110100011000010010001000,
        0b1011110100011000010010001001,
        0b1011110100011000010010001010,
        0b1011110100011000010010001011,
        0b101111010001100001001000100,
        0b101111010001100001001000101,
        0b10111101000110000100100010,
        0b1011110100011000010010001,
        0b101111010001100001001000,
        0b101111010001100001001001,
        0b10111101000110000100100,
        0b1011110100011000010010101000000,
        0b1011110100011000010010101000001,
        0b1011110100011000010010101000010,
        0b1011110100011000010010101000011,
        0b1011110100011000010010101000100,
        0b1011110100011000010010101000101,
        0b1011110100011000010010101000110,
        0b1011110100011000010010101000111,
        0b1011110100011000010010101001000,
        0b1011110100011000010010101001001,
        0b1011110100011000010010101001010,
        0b1011110100011000010010101001011,
        0b1011110100011000010010101001100,
        0b1011110100011000010010101001101,
        0b1011110100011000010010101001110,
        0b1011110100011000010010101001111,
        0b1011110100011000010010101010000,
        0b1011110100011000010010101010001,
        0b1011110100011000010010101010010,
        0b1011110100011000010010101010011,
        0b1011110100011000010010101010100,
        0b1011110100011000010010101010101,
        0b1011110100011000010010101010110,
        0b1011110100011000010010101010111,
        0b1011110100011000010010101011000,
        0b1011110100011000010010101011001,
        0b1011110100011000010010101011010,
        0b1011110100011000010010101011011,
        0b1011110100011000010010101011100,
        0b1011110100011000010010101011101,
        0b1011110100011000010010101011110,
        0b1011110100011000010010101011111,
        0b101111010001100001001010100000,
        0b101111010001100001001010100001,
        0b101111010001100001001010100010,
        0b101111010001100001001010100011,
        0b101111010001100001001010100100,
        0b101111010001100001001010100101,
        0b101111010001100001001010100110,
        0b101111010001100001001010100111,
        0b101111010001100001001010101000,
        0b101111010001100001001010101001,
        0b101111010001100001001010101010,
        0b101111010001100001001010101011,
        0b101111010001100001001010101100,
        0b101111010001100001001010101101,
        0b101111010001100001001010101110,
        0b101111010001100001001010101111,
        0b10111101000110000100101010000,
        0b10111101000110000100101010001,
        0b10111101000110000100101010010,
        0b10111101000110000100101010011,
        0b10111101000110000100101010100,
        0b10111101000110000100101010101,
        0b10111101000110000100101010110,
        0b10111101000110000100101010111,
        0b1011110100011000010010101000,
        0b1011110100011000010010101001,
        0b1011110100011000010010101010,
        0b1011110100011000010010101011,
        0b101111010001100001001010100,
        0b101111010001100001001010101,
        0b10111101000110000100101010,
        0b1011110100011000010010101,
        0b101111010001100001001010,
        0b101111010001100001001011,
        0b10111101000110000100101,
        0b1011110100011000010010,
        0b1011110100011000010011,
        0b101111010001100001001,
        0b10111101000110000100,
        0b1011110100011000010101000000,
        0b1011110100011000010101000001,
        0b1011110100011000010101000010,
        0b1011110100011000010101000011,
        0b1011110100011000010101000100,
        0b1011110100011000010101000101,
        0b1011110100011000010101000110,
        0b1011110100011000010101000111,
        0b1011110100011000010101001000,
        0b1011110100011000010101001001,
        0b1011110100011000010101001010,
        0b1011110100011000010101001011,
        0b1011110100011000010101001100,
        0b1011110100011000010101001101,
        0b1011110100011000010101001110,
        0b1011110100011000010101001111,
        0b1011110100011000010101010000,
        0b1011110100011000010101010001,
        0b1011110100011000010101010010,
        0b1011110100011000010101010011,
        0b1011110100011000010101010100,
        0b1011110100011000010101010101,
        0b1011110100011000010101010110,
        0b1011110100011000010101010111,
        0b1011110100011000010101011000,
        0b1011110100011000010101011001,
        0b1011110100011000010101011010,
        0b1011110100011000010101011011,
        0b1011110100011000010101011100,
        0b1011110100011000010101011101,
        0b1011110100011000010101011110,
        0b1011110100011000010101011111,
        0b101111010001100001010100000,
        0b101111010001100001010100001,
        0b101111010001100001010100010,
        0b101111010001100001010100011,
        0b101111010001100001010100100,
        0b101111010001100001010100101,
        0b101111010001100001010100110,
        0b101111010001100001010100111,
        0b101111010001100001010101000,
        0b101111010001100001010101001,
        0b101111010001100001010101010,
        0b101111010001100001010101011,
        0b101111010001100001010101100,
        0b101111010001100001010101101,
        0b101111010001100001010101110,
        0b101111010001100001010101111,
        0b10111101000110000101010000,
        0b10111101000110000101010001,
        0b10111101000110000101010010,
        0b10111101000110000101010011,
        0b10111101000110000101010100,
        0b10111101000110000101010101,
        0b10111101000110000101010110,
        0b10111101000110000101010111,
        0b1011110100011000010101000,
        0b1011110100011000010101001,
        0b1011110100011000010101010,
        0b1011110100011000010101011,
        0b101111010001100001010100,
        0b101111010001100001010101,
        0b10111101000110000101010,
        0b1011110100011000010101,
        0b101111010001100001010,
        0b101111010001100001011,
        0b10111101000110000101,
        0b1011110100011000010,
        0b101111010001100001,
        0b10111101000110000,
        0b1011110100011000,
        0b1011110100011111000000,
        0b101111010001111100000,
        0b1011110100011111000010,
        0b101111010001111100001,
        0b1011110100011111000100,
        0b101111010001111100010,
        0b10111101000111110000,
        0b10111101000111110001,
        0b10111101000111110010,
        0b10111101000111110011,
        0b10111101000111110100,
        0b10111101000111110101,
        0b10111101000111110110,
        0b10111101000111110111,
        0b1011110100011111000,
        0b1011110100011111001,
        0b1011110100011111010,
        0b1011110100011111011,
        0b101111010001111100,
        0b101111010001111101,
        0b10111101000111110,
        0b1011110100011111,
        0b101111010001000,
        0b101111010001001,
        0b101111010001010,
        0b101111010001011,
        0b101111010001100,
        0b101111010001101,
        0b101111010001110,
        0b101111010001111,
        0b10111101000100,
        0b10111101000101,
        0b10111101000110,
        0b10111101000111,
        0b1011110100010,
        0b1011110100011,
        0b101111010001,
        0b10111101000,
        0b1011110100101000,
        0b1011110100101001,
        0b1011110100101010,
        0b1011110100101011,
        0b101111010010100,
        0b101111010010101,
        0b10111101001010,
        0b1011110100101,
        0b10111101001110,
        0b1011110100111,
        0b101111010010,
        0b101111010011,
        0b10111101001,
        0b1011110100,
        0b101111010,
        0b10111101,
        0b1011111000,
        0b101111100,
        0b10111110,
        0b101111110001110,
        0b10111111000111,
        0b1011111100010,
        0b1011111100011,
        0b101111110001,
        0b10111111000,
        0b1011111100,
        0b101111110,
        0b10111111,
        0b1100000000,
        0b110000000,
        0b11000000]:
      res[i] = d(res.getOrDefault(2 * i + 0), res.getOrDefault(2 * i + 1))
    for i in 193 ..< 256:
      res[i] = d([])
    for i in countdown(127, 1):
      res[i] = d(res.getOrDefault(2 * i + 0), res.getOrDefault(2 * i + 1))
    res

func toBin(x: int): string =
  "0b" & x.toBin(len = 100).strip(trailing = false, chars = {'0'})

suite "Merkleization types":
  test "All generalized indices with content":
    for i, r in roots:
      checkpoint toBin(i)
      var root {.noinit.}: array[1, Digest]
      hash_tree_root(x, [i.GeneralizedIndex], root).get
      check:
        root == [r]
        hash_tree_root(x, [i.GeneralizedIndex]).get == [r]
        hash_tree_root(x, i.GeneralizedIndex).get == r

  test "All members of root object":
    var i = 128
    enumInstanceSerializedFields(x, _ {.used.}, field):
      checkpoint toBin(i)
      let r = roots.getOrDefault(i)
      var root {.noinit.}: array[1, Digest]
      hash_tree_root(x, [i.GeneralizedIndex], root).get
      check:
        root == [r]
        hash_tree_root(x, [i.GeneralizedIndex]).get == [r]
        hash_tree_root(x, i.GeneralizedIndex).get == r
        hash_tree_root(field) == r
      inc i

  test "Generalized index 1 (static)":
    const i = 1
    let r = roots.getOrDefault(i)
    var root {.noinit.}: array[1, Digest]
    hash_tree_root(x, [i.GeneralizedIndex], root).get
    check:
      root == [r]
      hash_tree_root(x, [i.GeneralizedIndex]).get == [r]
      hash_tree_root(x, i.GeneralizedIndex).get == r
      hash_tree_root(x) == r

  test "Generalized index 2 (static)":
    const i = 2
    let r = roots.getOrDefault(i)
    var root {.noinit.}: array[1, Digest]
    hash_tree_root(x, [i.GeneralizedIndex], root).get
    check:
      root == [r]
      hash_tree_root(x, [i.GeneralizedIndex]).get == [r]
      hash_tree_root(x, i.GeneralizedIndex).get == r

  test "Unknown generalized indices (errors)":
    proc doTest(i: uint64) =
      if i <= int.high.uint64 and roots.hasKey(i.int):
        return

      checkpoint toBin(i.int64)
      var root {.noinit.}: array[1, Digest]
      check:
        hash_tree_root(x, [i.GeneralizedIndex], root).isErr
        hash_tree_root(x, [i.GeneralizedIndex]).isErr
        hash_tree_root(x, i.GeneralizedIndex).isErr

    for i in 0'u64 ..< 1'u64 shl 20:
      doTest i

    randomize()
    const numRandomTests = 1 shl 20
    for _ in 0 ..< numRandomTests:
      let i = rand(1'u64 shl 20 ..< 1'u64 shl 31)
      doTest i

  test "Generalized index 999 (error - static)":
    const i = 999
    var root {.noinit.}: array[1, Digest]
    check:
      hash_tree_root(x, [i.GeneralizedIndex], root).isErr
      hash_tree_root(x, [i.GeneralizedIndex]).isErr
      hash_tree_root(x, i.GeneralizedIndex).isErr

  test "Generalized index 0 (error)":
    let i = 0
    var root {.noinit.}: array[1, Digest]
    check:
      hash_tree_root(x, [i.GeneralizedIndex], root).isErr
      hash_tree_root(x, [i.GeneralizedIndex]).isErr
      hash_tree_root(x, i.GeneralizedIndex).isErr

  test "Generalized index 0 (error - static)":
    const i = 0
    var root {.noinit.}: array[1, Digest]
    check:
      hash_tree_root(x, [i.GeneralizedIndex], root).isErr
      hash_tree_root(x, [i.GeneralizedIndex]).isErr
      hash_tree_root(x, i.GeneralizedIndex).isErr

  test "Generalized index max (error)":
    let i = GeneralizedIndex.high
    var root {.noinit.}: array[1, Digest]
    check:
      hash_tree_root(x, [i], root).isErr
      hash_tree_root(x, [i]).isErr
      hash_tree_root(x, i).isErr

  test "Generalized index max (error - static)":
    const i = GeneralizedIndex.high
    var root {.noinit.}: array[1, Digest]
    check:
      hash_tree_root(x, [i], root).isErr
      hash_tree_root(x, [i]).isErr
      hash_tree_root(x, i).isErr

  test "Multiproof":
    let
      i = [
        0b10000000.GeneralizedIndex,
        0b100010101,
        0b100010000,
        0b10001110,
        0b100100111,
        0b10010001011,
        0b1001011011,
        0b1001011010,
        0b10010110011,
        0b100100100]
      r = i.mapIt(roots.getOrDefault(it.int))
    var roots {.noinit.}: array[i.len, Digest]
    hash_tree_root(x, i, roots).get
    check:
      roots == r
      hash_tree_root(x, i).get == roots

  test "Multiproof (static)":
    const i = [
      0b10000000.GeneralizedIndex,
      0b100010101,
      0b100010000,
      0b10001110,
      0b100100111,
      0b10010001011,
      0b1001011011,
      0b1001011010,
      0b10010110011,
      0b100100100]
    let r = i.mapIt(roots.getOrDefault(it.int))
    var roots {.noinit.}: array[i.len, Digest]
    hash_tree_root(x, i, roots).get
    check:
      roots == r
      hash_tree_root(x, i).get == roots

  test "Multiproof (empty)":
    let
      i: array[0, GeneralizedIndex] = []
      r: array[0, Digest] = []
    var roots {.noinit.}: array[i.len, Digest]
    hash_tree_root(x, i, roots).get
    check:
      roots == r
      hash_tree_root(x, i).get == roots

  test "Multiproof (empty - static)":
    const i: array[0, GeneralizedIndex] = []
    let r: array[0, Digest] = []
    var roots {.noinit.}: array[i.len, Digest]
    hash_tree_root(x, i, roots).get
    check:
      roots == r
      hash_tree_root(x, i).get == roots

  test "Multiproof (error)":
    let i = [32.GeneralizedIndex, 85, 80, 46, 103, 395, 219, 218, 435, 999]
    var roots {.noinit.}: array[i.len, Digest]
    check:
      hash_tree_root(x, i, roots).isErr
      hash_tree_root(x, i).isErr

  test "Multiproof (error - static)":
    const i = [32.GeneralizedIndex, 85, 80, 46, 103, 395, 219, 218, 435, 999]
    var roots {.noinit.}: array[i.len, Digest]
    check:
      hash_tree_root(x, i, roots).isErr
      hash_tree_root(x, i).isErr

  test "Multiproof (invalid indices)":
    let i = [1.GeneralizedIndex, 2, 3]
    var roots {.noinit.}: array[i.len, Digest]
    check:
      hash_tree_root(x, i, roots).isErr
      hash_tree_root(x, i).isErr

  test "Multiproof (invalid indices - static)":
    const i = [1.GeneralizedIndex, 2, 3]
    var roots {.noinit.}: array[i.len, Digest]
    check:
      hash_tree_root(x, i, roots).isErr
      hash_tree_root(x, i).isErr

type
  InnerA = object
    a: uint64
  InnerB = object
    b: uint8

  InnerUnionKind = enum
    iuA, iuB

  InnerUnion = object
    case kind: InnerUnionKind
    of iuA:
      va: InnerA
    of iuB:
      vb: InnerB

  OuterX = object
    x: uint64
  OuterY = object
    y: seq[byte]

  OuterUnionKind = enum
    ouX, ouY, ouInner

  OuterUnion = object
    case kind: OuterUnionKind
    of ouX:
      ox: OuterX
    of ouY:
      oy: OuterY
    of ouInner:
      inner: InnerUnion

suite "Merkleization: nested SSZ union":
  test "hash_tree_root deterministic":
    let
      iu = InnerUnion(kind: iuB, vb: InnerB(b: 99))
      ou = OuterUnion(kind: ouInner, inner: iu)
      root1 = hash_tree_root(ou)
      root2 = hash_tree_root(ou)
    check root1 == root2

  test "hash_tree_root varies with tag change":
    let
      iuA = InnerUnion(kind: iuA, va: InnerA(a: 7))
      iuB = InnerUnion(kind: iuB, vb: InnerB(b: 8))
      ou1 = OuterUnion(kind: ouInner, inner: iuA)
      ou2 = OuterUnion(kind: ouInner, inner: iuB)
    check hash_tree_root(ou1) != hash_tree_root(ou2)
